// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//--------------------------------------------------------------------------
// user

model User {
  id                   Int      @id @default(autoincrement())
  email                String   @unique
  username             String   @unique
  staff                Boolean  @default(false)
  password             String?
  profile              Profile?
  twoFactorAuthEnabled Boolean  @default(false)
  twoFactorAuthSecret  String?

  followee Follow[] @relation("Followee")
  follower Follow[] @relation("Follower")
  blocker  Block[]  @relation("Blocker")
  blocked  Block[]  @relation("Blocked")

  channelUsers ChatChannelUsers[]
  chatMessages ChatMessages[]
  banned       ChatBan[]
  muted        ChatMute[]

  user1      DmChannels[] @relation("User1")
  user2      DmChannels[] @relation("User2")
  dmMessages DmMessages[]

  gameUser1 GameInfo[] @relation("GameUser1")
  gameUser2 GameInfo[] @relation("GameUser2")
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

// follower -[follow]-> followee
model Follow {
  id         Int  @id @default(autoincrement())
  followee   User @relation("Followee", fields: [followeeId], references: [id])
  followeeId Int
  follower   User @relation("Follower", fields: [followerId], references: [id])
  followerId Int

  @@unique([followeeId, followerId])
}

// blocker -[block]-> blocked
model Block {
  id        Int  @id @default(autoincrement())
  blocker   User @relation("Blocker", fields: [blockerId], references: [id])
  blockerId Int
  blocked   User @relation("Blocked", fields: [blockedId], references: [id])
  blockedId Int

  @@unique([blockerId, blockedId])
}

//--------------------------------------------------------------------------
// chat

enum Publicity {
  PUBLIC
  PRIVATE
}

enum UserType {
  OWNER
  ADMIN
  USER
}

model ChatChannels {
  channelId      Int                @id @default(autoincrement())
  channelName    String             @unique
  createdAt      DateTime
  channelType    Publicity
  hashedPassword String?
  users          ChatChannelUsers[]
  chatMessages   ChatMessages[]
  bannedUsers    ChatBan[]
  mutedUsers     ChatMute[]
}

model ChatChannelUsers {
  channelUserId Int          @id @default(autoincrement())
  channel       ChatChannels @relation(fields: [channelId], references: [channelId])
  channelId     Int // relation scalar field  (used in 'channel')
  user          User         @relation(fields: [userId], references: [id])
  userId        Int // relation scalar field  (used in 'user')
  type          UserType

  @@unique([channelId, userId, type])
}

model ChatMessages {
  messageId Int          @id @default(autoincrement())
  channel   ChatChannels @relation(fields: [channelId], references: [channelId])
  channelId Int // relation scalar field  (used in 'channel')
  sender    User         @relation(fields: [senderId], references: [id])
  senderId  Int // relation scalar field  (used in 'sender')
  content   String
  createdAt DateTime
}

model ChatBan {
  id           Int          @id @default(autoincrement())
  channel      ChatChannels @relation(fields: [channelId], references: [channelId])
  channelId    Int // relation scalar field  (used in 'channel')
  bannedUser   User         @relation(fields: [bannedUserId], references: [id])
  bannedUserId Int // relation scalar field  (used in 'bannedUser')

  @@unique([channelId, bannedUserId])
}

model ChatMute {
  id          Int          @id @default(autoincrement())
  channel     ChatChannels @relation(fields: [channelId], references: [channelId])
  channelId   Int // relation scalar field  (used in 'channel')
  mutedUser   User         @relation(fields: [mutedUserId], references: [id])
  mutedUserId Int // relation scalar field  (used in 'mutedUser')
  muteUntil   DateTime

  @@unique([channelId, mutedUserId])
}

//--------------------------------------------------------------------------
// dm

model DmChannels {
  channelId  Int          @id @default(autoincrement())
  user1      User         @relation("User1", fields: [user1Id], references: [id])
  user1Id    Int // relation scalar field  (used in 'user1')
  user2      User         @relation("User2", fields: [user2Id], references: [id])
  user2Id    Int // relation scalar field  (used in 'user2')
  dmMessages DmMessages[]
}

model DmMessages {
  messageId Int        @id @default(autoincrement())
  channel   DmChannels @relation(fields: [channelId], references: [channelId])
  channelId Int // relation scalar field  (used in 'channel')
  sender    User       @relation(fields: [senderId], references: [id])
  senderId  Int // relation scalar field  (used in 'sender')
  content   String
  createdAt DateTime
}

//--------------------------------------------------------------------------
// game

model GameInfo {
  gameId          Int             @id @default(autoincrement())
  user1           User            @relation("GameUser1", fields: [user1Id], references: [id])
  user1Id         Int             // relation scalar field  (used in 'user1')
  user2           User            @relation("GameUser2", fields: [user2Id], references: [id])
  user2Id         Int             // relation scalar field  (used in 'user2')
  gameSettings    GameSettings?
  user1Score      Int?
  user2Score      Int?
  startedAt       DateTime?
  endedAt         DateTime?
}

model GameSettings {
  id        Int       @id @default(autoincrement())
  game      GameInfo  @relation(fields: [gameId], references: [gameId])
  gameId    Int       @unique
  points    Int
  isSpeedUp Boolean
}
