// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//--------------------------------------------------------------------------
// user

model User {
  id                   Int      @id @default(autoincrement())
  email                String   @unique
  username             String   @unique
  staff                Boolean  @default(false)
  password             String?
  profile              Profile?
  twoFactorAuthEnabled Boolean  @default(false)
  twoFactorAuthSecret  String?

  blockedBy            UserBlock[] @relation("BlockedBy")
  blocked              UserBlock[] @relation("Blocked")
  channelUsers         ChatChannelUsers[]
  chatMessages         ChatMessages[]
  banned               ChatBan[]
  muted                ChatMute[]
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id])
}

model UserBlock {
  id              Int             @id @default(autoincrement())
  user            User            @relation("BlockedBy", fields: [userId], references: [id])
  userId          Int             // relation scalar field  (used in 'user')
  blockedUser     User            @relation("Blocked", fields: [blockedUserId], references: [id])
  blockedUserId   Int             // relation scalar field  (used in 'blockedUser')

  @@unique([userId, blockedUserId])
}

//--------------------------------------------------------------------------
// chat

enum Publicity {
  PUBLIC
  PRIVATE
}

enum UserType {
  OWNER
  ADMIN
  USER
}

model ChatChannels {
  channelId       Int             @id @default(autoincrement())
  channelName     String          @unique
  createdAt       DateTime
  channelType     Publicity
  hashedPassword  String?
  users           ChatChannelUsers[]
  chatMessages    ChatMessages[]
  bannedUsers     ChatBan[]
  mutedUsers      ChatMute[]
}

model ChatChannelUsers {
  channelUserId   Int             @id @default(autoincrement())
  channel         ChatChannels    @relation(fields: [channelId], references: [channelId])
  channelId       Int             // relation scalar field  (used in 'channel')
  user            User            @relation(fields: [userId], references: [id])
  userId          Int             // relation scalar field  (used in 'user')
  type            UserType

  @@unique([channelId, userId, type])
}

model ChatMessages {
  messageId       Int             @id @default(autoincrement())
  channel         ChatChannels    @relation(fields: [channelId], references: [channelId])
  channelId       Int             // relation scalar field  (used in 'channel')
  sender          User            @relation(fields: [senderId], references: [id])
  senderId        Int             // relation scalar field  (used in 'sender')
  content         String
  createdAt       DateTime
}

model ChatBan {
  id              Int             @id @default(autoincrement())
  channel         ChatChannels    @relation(fields: [channelId], references: [channelId])
  channelId       Int             // relation scalar field  (used in 'channel')
  bannedUser      User            @relation(fields: [bannedUserId], references: [id])
  bannedUserId    Int             // relation scalar field  (used in 'bannedUser')

  @@unique([channelId, bannedUserId])
}

model ChatMute {
  id              Int             @id @default(autoincrement())
  channel         ChatChannels    @relation(fields: [channelId], references: [channelId])
  channelId       Int             // relation scalar field  (used in 'channel')
  mutedUser       User            @relation(fields: [mutedUserId], references: [id])
  mutedUserId     Int             // relation scalar field  (used in 'mutedUser')
  muteUntil       DateTime

  @@unique([channelId, mutedUserId])
}

//--------------------------------------------------------------------------
// 削除予定

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    String
  createdAt DateTime @default(now())
}
